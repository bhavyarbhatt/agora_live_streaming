import 'package:flutter/material.dart';
import 'dart:async';

import 'package:agora_rtc_engine/rtc_engine.dart';
import 'package:agora_rtc_engine/rtc_local_view.dart' as RtcLocalView;
import 'package:agora_rtc_engine/rtc_remote_view.dart' as RtcRemoteView;
import 'package:lottie/lottie.dart';
import 'package:permission_handler/permission_handler.dart';

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

// App state class
class _MyAppState extends State<MyApp> {
  final _users = <int>[];
  bool _joined = false;
  int _remoteUid = 0;
  bool muted = false;
  // var RtcEngine engine;

  @override
  void initState() {
    super.initState();
    initPlatformState();
  }

  // Init the app
  Future<void> initPlatformState() async {
    await [Permission.camera, Permission.microphone].request();

    // Create RTC client instance
    RtcEngineContext context = RtcEngineContext(APP_ID);
    var engine = await RtcEngine.createWithContext(context);
    // Define event handling logic
    engine.setEventHandler(RtcEngineEventHandler(
        joinChannelSuccess: (String channel, int uid, int elapsed) {
          print('joinChannelSuccess ${channel} ${uid}');
          setState(() {
            _joined = true;
          });
        }, userJoined: (int uid, int elapsed) {
      print('userJoined ${uid}');
      setState(() {
        _remoteUid = uid;
      });
    }, userOffline: (int uid, UserOfflineReason reason) {
      print('userOffline ${uid}');
      setState(() {
        _remoteUid = 0;
      });
    }));
    // Enable video
    await engine.enableVideo();
    // Set channel profile as livestreaming
    await engine.setChannelProfile(ChannelProfile.LiveBroadcasting);
    // Set user role as broadcaster
    await engine.setClientRole(ClientRole.Broadcaster);
    // Join channel with channel name as 123
    await engine.joinChannel(Token, 'abc', null, 0);

  }

  Future<void> _onCallEnd(BuildContext context) async{
    RtcEngineContext context = RtcEngineContext(APP_ID);

    var engine = await RtcEngine.createWithContext(context);
    _users.clear();
    // // destroy sdk
    engine.leaveChannel();
    engine.destroy();
    // Navigator.pop(context);
  }

  Future<void> _onSwitchCamera() async{
    RtcEngineContext context = RtcEngineContext(APP_ID);
    var engine = await RtcEngine.createWithContext(context);
    engine.switchCamera();
  }

  /// Toolbar layout
  Widget _toolbar() {
    return Container(
      alignment: Alignment.bottomCenter,
      padding: const EdgeInsets.symmetric(vertical: 48),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          RawMaterialButton(
            onPressed: (){},
            padding: const EdgeInsets.all(12.0),
          ),

          RawMaterialButton(
            onPressed: () => _onCallEnd(context),
            child: Icon(
              Icons.call_end,
              color: Colors.white,
              size: 35.0,
            ),
            shape: CircleBorder(),
            elevation: 2.0,
            fillColor: Colors.redAccent,
            padding: const EdgeInsets.all(15.0),
          ),

          RawMaterialButton(
            onPressed: _onSwitchCamera,
            child: Icon(
              Icons.switch_camera,
              color: Colors.white,
              size: 20.0,
            ),
            shape: CircleBorder(),
            elevation: 2.0,
            fillColor: Color(0xff241F4D),
            padding: const EdgeInsets.all(12.0),
          )
        ],
      ),
    );
  }

  // Build UI
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData(
        // backgroundColor: Color(0xff241F4D),
        // primaryColor: Color(0xff241F4D),
        appBarTheme: AppBarTheme(
          color: Color(0xff241F4D),
        ),
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Admin',style: TextStyle(color: Colors.white,),),
        ),
        body: Stack(
          children: [
            _renderLocalPreview(),
          ],
        ),
      ),
    );
  }

  // Local preview
  Widget _renderLocalPreview() {
    if (_joined) {
      // return        RtcLocalView.SurfaceView();
      return Stack(
      children: [
        RtcLocalView.SurfaceView(),
        _toolbar(),
      ],
      );
    } else {
      return Container(
          width: double.infinity,
          height: double.infinity,
          child:COnt
    }
  }

}
